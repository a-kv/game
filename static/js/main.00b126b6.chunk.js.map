{"version":3,"sources":["assets/prikolnoe-chavkane.mp3","assets/logo.gif","assets/mic.png","reduser.js","components/Item/Item.js","components/Items/Items.js","App.js","serviceWorker.js","store.js","index.js"],"names":["module","exports","initialState","counter","items","randomIndex","speed","Item","render","classChanged","props","item","className","onClick","src","mic","React","Component","Items","gameItems","map","key","id","App","makeRandomIndex","makeRandomInd","Math","floor","random","length","onClickUp","Audio","audio","play","incCounter","logo","alt","setInterval","this","ConnectedApp","connect","state","dispatch","type","incCounterAC","makeRandomIndexAC","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,uPCIrCC,EAAe,CACjBC,QAAS,EACTC,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCC,YAAa,EACbC,MAAO,K,iBCYIC,E,4MAfXC,OAAS,WACL,IAAIC,EAAe,EAAKC,MAAMC,OAAS,EAAKD,MAAML,YAAc,OAAS,QACzE,OACY,yBAAKO,UAAW,QACZ,yBACAC,QAAS,EAAKH,MAAMG,QACpBD,UAAWH,EACXK,IAAKC,Q,YATVC,IAAMC,WCeVC,E,4MAbXV,OAAS,WAEL,IAAIW,EAAY,EAAKT,MAAMN,MAAMgB,KAAI,SAAAT,GAAI,OAAI,kBAAC,EAAD,CAAMU,IAAKV,EAAKW,GAAIjB,YAAa,EAAKK,MAAML,YACnCQ,QAAS,EAAKH,MAAMG,QAASF,KAAMA,OAEzF,OACI,yBAAKC,UAAU,aACVO,I,YATGH,IAAMC,WCKpBM,E,4MAEFC,gBAAkB,WACd,EAAKd,MAAMe,cAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKlB,MAAMN,MAAMyB,U,EAOzEC,UAAY,WACR,IAAIC,MAAMC,KAAOC,OACjB,EAAKvB,MAAMwB,WAAW,EAAKxB,MAAMP,U,EAGrCK,OAAS,WACL,OACI,yBAAKI,UAAU,OACX,yBAAKE,IAAKqB,IAAMC,IAAI,SACpB,8BAAO,EAAK1B,MAAMP,SAClB,yBAAKS,UAAW,aACZ,kBAAC,EAAD,CACIR,MAAO,EAAKM,MAAMN,MAClBC,YAAa,EAAKK,MAAML,YACxBQ,QAAS,EAAKiB,e,kEAjB9BO,YAAYC,KAAKd,gBAAiBc,KAAK5B,MAAMJ,W,GAPnCU,IAAMC,WAoDTsB,EADMC,aApBG,SAACC,GACrB,MAAO,CACHtC,QAASsC,EAAMtC,QACfC,MAAOqC,EAAMrC,MACbC,YAAaoC,EAAMpC,YACnBC,MAAOmC,EAAMnC,UAGM,SAACoC,GACxB,MAAM,CACFR,WAAY,SAAC/B,GACTuC,EHrBgB,SAACvC,GAAD,MAAc,CAACwC,KA7BhB,cA6BmCxC,WGqBzCyC,CAAazC,KAE1BsB,cAAe,SAACpB,GACZqC,EHvBqB,SAACrC,GAAD,MAAkB,CAACsC,KA7BnB,oBA6B4CtC,eGuBxDwC,CAAkBxC,QAMlBmC,CAA6CjB,GC/C9CuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCbSC,EADDC,aLOS,WAAmC,IAAlCX,EAAiC,uDAAzBvC,EAAcmD,EAAW,uCACrD,OAAQA,EAAOV,MACX,IAbmB,cAcf,OAAO,eACAF,EADP,CAEItC,QAASkD,EAAOlD,QAAS,IAEjC,IAjByB,oBAkBrB,OAAO,eACAsC,EADP,CAEIpC,YAAagD,EAAOhD,cAE5B,QACI,OAAOoC,MMhBnBa,IAAS9C,OACP,kBAAC,IAAD,CAAU2C,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00b126b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/prikolnoe-chavkane.fc3397be.mp3\";","module.exports = __webpack_public_path__ + \"static/media/logo.9a80272f.gif\";","module.exports = __webpack_public_path__ + \"static/media/mic.ebd22e58.png\";","export const INC_COUNTER = 'INC_COUNTER';\r\nexport const MAKE_RANDOM_INDEX = 'MAKE_RANDOM_INDEX';\r\n\r\n\r\nconst initialState = {\r\n    counter: 0,\r\n    items: [0, 1, 2, 3, 4, 5, 6, 7, 8],\r\n    randomIndex: 3,\r\n    speed: 1000\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INC_COUNTER:\r\n            return {\r\n                ...state,\r\n                counter: action.counter +1\r\n            }\r\n        case MAKE_RANDOM_INDEX:\r\n            return {\r\n                ...state,\r\n                randomIndex: action.randomIndex\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport const incCounterAC = (counter) => ({type: INC_COUNTER, counter})\r\nexport const makeRandomIndexAC = (randomIndex) => ({type: MAKE_RANDOM_INDEX, randomIndex})","import React from 'react';\nimport mic from '../../assets/mic.png';\n\nclass Item extends React.Component {\n\n    render = () => {\n        let classChanged = this.props.item === this.props.randomIndex ? 'show' : 'photo'\n        return (\n                    <div className={'item'}>\n                        <img\n                        onClick={this.props.onClick}\n                        className={classChanged}\n                        src={mic}\n\n                    />\n                    </div>\n        );\n    }\n}\n\nexport default Item;\n","import React from 'react';\nimport Item from \"../Item/Item\";\n\nclass Items extends React.Component {\n\n    render = () => {\n\n        let gameItems = this.props.items.map(item => <Item key={item.id} randomIndex={this.props.randomIndex}\n                                                              onClick={this.props.onClick} item={item}\n                                                                />)\n        return (\n            <div className='container'>\n                {gameItems}\n            </div>\n        )\n    }\n}\n\nexport default Items;\n","import React from 'react';\nimport './App.css';\nimport audio from './assets/prikolnoe-chavkane.mp3';\nimport logo from './assets/logo.gif';\nimport {connect} from \"react-redux\";\nimport {incCounterAC, makeRandomIndexAC} from \"./reduser\";\nimport Items from \"./components/Items/Items\";\n\nclass App extends React.Component {\n\n    makeRandomIndex = () => {\n        this.props.makeRandomInd(Math.floor(Math.random() * this.props.items.length))\n    }\n\n    componentDidMount() {\n        setInterval(this.makeRandomIndex, this.props.speed)\n    }\n\n    onClickUp = () => {\n        new Audio(audio).play()\n        this.props.incCounter(this.props.counter)\n    }\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <img src={logo} alt=\"logo\"/>\n                <span>{this.props.counter}</span>\n                <div className={'container'}>\n                    <Items\n                        items={this.props.items}\n                        randomIndex={this.props.randomIndex}\n                        onClick={this.onClickUp}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) =>{\n    return {\n        counter: state.counter,\n        items: state.items,\n        randomIndex: state.randomIndex,\n        speed: state.speed\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return{\n        incCounter: (counter) =>{\n            dispatch(incCounterAC(counter));\n        },\n        makeRandomInd: (randomIndex) => {\n            dispatch(makeRandomIndexAC(randomIndex));\n        }\n    }\n\n}\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./reduser\";\r\n\r\n\r\nconst store = createStore(reducer)\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}